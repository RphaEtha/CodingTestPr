07. Find peak element

어떠한 element가 있을때, peak element를 찾으라는 말이다.
여기서 말하는 peak element란? 어떤 숫자가 그 이웃 숫자보다 클 때 peak라고 정의한다고 하자.


Array 문제를 보면서 intuition을 받을 수 있는 방법이 있어.
그래프를 그려보면 돼.
예를 들어서 
[1, 2, 3, 5, 4]를 그래프로 그려봐. 그러면 좀 더 직관적으로 솔루션을 찾을 수 있게 도와줘.

binarySearch를 한다는 것은 말 그대로 주어진 인덱스를 반으로 자른다는 말이다.

반으로 자른다음 다음 element랑 비교해보는거지.
만약, 다음 element가 현재 element보다 크다면, peak는 다음 element에서 일어날 수 있겠다고 볼 수 있지.
그래서 나머지 옆 부분을 버려

int findPeakElem(int nums[])  {
	int left = 0;
	int right = nums.length - 1;

	if(nums.size() <= 1)
	{	
		return 0;
	}

	while(left < right)
	{
		int pivot = (left + right)/2;
		int num = nums[pivot];
		int nextNum = nums[pivot + 1];
	}
	
	else
	{
		right = pivot;
	}
	return left;
}

————————————————————————————————————————
Array 문제를 풀 때, institution을 얻을 수 있는 방법으로 그래프를 한 번 그려보고 조금더 직관적으로 솔루션을 얻어내는 것을 목표로 이 문제를 작성했어.

물론, 여기 문제의 경우는 하나의 peak만 찾으면 된다는 가정이 있기에 이런식으로 풀고, 좌측의 경우는 따로 만들지는 않았어. 목표가, Array 문제 풀이할때 직관을 얻을 수 있는 방법을 설명하고 직접 적용해보는 것을 원했어.
