정렬이된 Array에서의 search
-> binary Search (log(n))
정렬이 되지 않은 Array에서의 search

두 개의 정렬된 Array를 합쳐서 하나의 정렬된 array로 만드는 방법.

새로운 Array를 만들어서 정렬을 해달라는 상당히 쉬워
두 개의 인덱스를 가지고 작은 숫자를 하나씩 넣어주면 완성이 되는거지.
 
만약 기존에 있는 Array에 정렬을 해야한다면 어떨까?
[1, 3, 4, 0, 0, 0] 이런식으로 0은 숫자를 채우기 위해서 만들어 놓은 공간이라고 칠때, 
0을 첫 번째 부분부터 순차적으로 밀어버리고, 그리고 유효한 숫자가 있는 인덱스부터 다른 배열의 인덱스의 값과 비교를 통해서 작은 숫자를 0번부터 채워넣는 방법을 사용하면 해결할 수 있겠지.

그런데, 여기서 의문이 들어. 굳이 저렇게 한 번 0을 다 이동시키고 진행해야하나?

포인터를 가장 큰 수부터 보게한 다음, 0을 가장 큰 위치에 이동시키게 만들면 되지 않을까?

이를 위해서 포인터를 잘 만들고 그걸 잘 이용하는게 필요할 것 같다.

void merge(int[] nums1, int m, int[] nums2, int n)
{
	int num1Idx = m-1;
	int num2Idx = n-1;
	int wIdx = nums1.length - 1;

	if (num2Idx < 0)
	{
		return;
	}
	while (0 <= num1Idx && 0 <= num2Idx)
	{
		int num1 = nums1[num1Idx];
		int num2 = nums2[num2Idx];
		if (num2 <= num1)
		{
			int num = num1;
			num1[wIdx] = num;
			numIdx—;
			wIdx—;
		}
		else
		{
			int num = num2;
			num1[wIdx] = num;
			num2Idx—;
			wIdx—;
		}
	}
	while (0 <= num2Idx)
	{
		nums1[wIdx] = nums2[num2Idx];
		nums2Idx—;
		wIdx—;
	}

}


가장 중요한 핵심은 인덱스를 가지고 접근하는 사고방식이 중요하다.
Writing Index, Reading Index 
인덱스를 어떻게 활용해야하는가에 대해서 이해를 한다면, 기초적인 Array 문제는 다 해결이 가능하다.

